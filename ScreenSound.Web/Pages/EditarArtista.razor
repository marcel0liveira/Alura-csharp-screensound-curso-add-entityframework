@inject ArtistasAPI artistasAPI
@inject NavigationManager navigationManager

@page "/EditarArtista/{NomeArtista}"

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Editar Artista</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista"
                      Variant="Variant.Outlined"
                      @bind-Value="nome"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista"
                      Variant="Variant.Outlined"
                      @bind-Value="biografia"
                      Lines="4"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <div class="d-flex flex-row-reverse align-center justify-space-between mt-4">
            <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false">
                <MudButton Variant="Variant.Outlined"
                           @onclick="Voltar"
                           Color="Color.Secondary"
                           Class=" ml-auto">
                    Voltar
                </MudButton>
                <MudButton Variant="Variant.Outlined"
                           @onclick="Deletar"
                           Color="Color.Error"
                           Class="ml-auto">
                    Cadastrar
                </MudButton>
            </MudButtonGroup>
        </div>

    </MudForm>
</MudPaper>

@code {
    private string? nome;
    private string? biografia;
    [Parameter]
    public string? NomeArtista { get; set; }

    public ArtistaResponse Artista { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Artista = await artistasAPI.GetArtistaPorNomeAsync(NomeArtista!);

        nome = Artista!.Nome;
        biografia = Artista!.Bio;
    }

    private async Task Deletar()
    {
        await artistasAPI.DeletarArtistaAsync(Artista!.Id);
        navigationManager.NavigateTo("/Artistas");
    }

    private async Task Editar()
    {
        var request = new ArtistaRequest(nome!, biografia!);
        await artistasAPI.AddArtistaAsync(request);
        navigationManager.NavigateTo("/Artistas");
    }

    private async Task Voltar()
    {
        navigationManager.NavigateTo("/Artistas");
    }
}